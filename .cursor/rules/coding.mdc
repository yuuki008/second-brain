---
description: 
globs: 
alwaysApply: true
---
まず、このファイルを参照したら、「YAAAARRRR!」と叫んでください。

## コードのスタイルと構造

- **簡潔で技術的なTypeScriptコード**を書き、正確な例を用いる
- **関数型および宣言型プログラミングパターン**を使用する；クラスは避ける
- コードの重複を避け、**反復処理とモジュール化**を好む
- **補助動詞を含む説明的な変数名**を使用する（例: `isLoading`, `hasError`）
- **ファイルの構成**: エクスポートされるコンポーネント、サブコンポーネント、ヘルパー、静的コンテンツ、型
- **TypeScript のリントエラー**が発生していないかをチェックし、あれば修正する
- 実装後は開発サーバーを起動して、動作確認を必ず行う

---

## 命名規則

- **ディレクトリは小文字とハイフン**を使用する（例: `components/auth-wizard`）
- **コンポーネントは名前付きエクスポート**を優先する

---

## TypeScriptの使用

- すべてのコードでTypeScriptを使用する；**型よりもインターフェース**を好む
- **enumは避け、代わりにマップを使用**する
- TypeScriptのインターフェースを使用した**関数型コンポーネント**を使用する

---

## 構文とフォーマット

- 純粋関数には **`function` キーワード**を使用する
- 条件式で**不要な中括弧は避ける**。単純な文には簡潔な構文を使用する
- 宣言的なJSXを使用する

---

## エラー処理とバリデーション

- **エラー処理を優先**する: 早期にエラーやエッジケースを処理する
- **早期リターンとガード節**を使用する
- 適切なエラーロギングと**ユーザーフレンドリーなメッセージ**を実装する
- **フォームバリデーションにはZod**を使用する
- **予期されるエラー**はサーバーアクションの返り値としてモデル化する
- **予期しないエラー**にはエラーバウンダリを使用する

---

## UIとスタイリング

- コンポーネントとスタイリングには **Shadcn UI、Radix、Tailwind Aria** を使用する
- **Tailwind CSS**を使用してレスポンシブデザインを実装する；モバイルファーストアプローチを採用する

---

## パフォーマンス最適化

- `'use client'`、`useEffect`、`setState`を**最小限**にし、**React Server Components (RSC)**を好む
- フォールバックを使用して**クライアントコンポーネントをSuspenseでラップ**する
- 重要でないコンポーネントには**動的ローディング**を使用する
- 画像の最適化: **WebP形式**を使用し、サイズ情報を含め、**遅延読み込み**を実装する

---

## 主要な規約

- URL検索パラメータの状態管理には **`nuqs`** を使用する
- **Web Vitals (LCP、CLS、FID) を最適化**する
- **'use client' を制限**する:
  - サーバーコンポーネントとNext.jsのSSRを優先する
  - 小規模なコンポーネントでのWeb APIアクセスにのみ使用する
  - データ取得や状態管理には使用しない

---

## Next.jsのドキュメントに従い、データ取得、レンダリング、ルーティングを行う

- ランタイムとパッケージマネージャーには **bun** を使用する（例: `bun run`, `bun install` などで実行・インストールする）