// schema.prisma
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

generator client {
  provider = "prisma-client-js"
  seed     = "ts-node prisma/seed.ts"
}

model Node {
  id          String    @id @default(uuid())
  name        String 
  content     String
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")
  tags        Tag[]     @relation("NodeToTag")
  viewCount   Int       @default(0) @map("view_count")
  reactions   Reaction[]
  relations   Relation[] @relation("NodeFromRelation")
  relatedTo   Relation[] @relation("NodeToRelation")
  userId      String?
  user        User?     @relation(fields: [userId], references: [id])

  @@map("nodes")
}

model Tag {
  id        String   @id @default(uuid())
  name      String   @unique
  color     String   @default("#3B82F6") 
  createdAt DateTime @default(now()) @map("created_at")
  nodes     Node[]   @relation("NodeToTag")
  parent    Tag?     @relation("TagToTag", fields: [parentId], references: [id])
  parentId  String?
  children  Tag[]    @relation("TagToTag")
  userId    String?
  user      User?    @relation(fields: [userId], references: [id])

  @@map("tags")
}

model Relation {
  id          String   @id @default(uuid())
  fromNode    Node     @relation("NodeFromRelation", fields: [fromNodeId], references: [id])
  fromNodeId  String
  toNode      Node     @relation("NodeToRelation", fields: [toNodeId], references: [id])
  toNodeId    String
  createdAt   DateTime @default(now()) @map("created_at")

  @@unique([fromNodeId, toNodeId])
  @@map("relations")
}

model Reaction {
  id        String   @id @default(uuid())
  emoji     String
  visitorId String
  node      Node     @relation(fields: [nodeId], references: [id], onDelete: Cascade)
  nodeId    String
  createdAt DateTime @default(now()) @map("created_at")

  @@unique([nodeId, emoji, visitorId])
  @@map("reactions")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  username      String?   @unique
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  nodes         Node[]
  tags          Tag[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}